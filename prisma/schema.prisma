generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  firstName String?
  lastName  String?
  email     String    @unique
  posts     Post[]
  keys      APIKey[]
  projects  Project[]
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  posts     Post[]
  keys      APIKey[]
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

enum Lang {
  AB
  AA
  AF
  AK
  SQ
  AM
  AR
  AN
  HY
  AS
  AV
  AE
  AY
  AZ
  BM
  BA
  EU
  BE
  BN
  BH
  BI
  BS
  BR
  BG
  MY
  CA
  KM
  CH
  CE
  NY
  ZH
  CU
  CV
  KW
  CO
  CR
  HR
  CS
  DA
  DV
  NL
  DZ
  EN
  EO
  ET
  EE
  FO
  FJ
  FI
  FR
  FF
  GD
  GL
  LG
  KA
  DE
  KI
  EL
  KL
  GN
  GU
  HT
  HA
  HE
  HZ
  HI
  HO
  HU
  IS
  IO
  IG
  ID
  IA
  IE
  IU
  IK
  GA
  IT
  JA
  JV
  KN
  KR
  KS
  KK
  RW
  KV
  KG
  KO
  KJ
  KU
  KY
  LO
  LA
  LV
  LB
  LI
  LN
  LT
  LU
  MK
  MG
  MS
  ML
  MT
  GV
  MI
  MR
  MH
  RO
  MN
  NA
  NV
  ND
  NG
  NE
  SE
  NO
  NB
  NN
  II
  OC
  OJ
  OR
  OM
  OS
  PI
  PA
  PS
  FA
  PL
  PT
  QU
  RM
  RN
  RU
  SM
  SG
  SA
  SC
  SR
  SN
  SD
  SI
  SK
  SL
  SO
  ST
  NR
  ES
  SU
  SW
  SS
  SV
  TL
  TY
  TG
  TA
  TT
  TE
  TH
  BO
  TI
  TO
  TS
  TN
  TR
  TK
  TW
  UG
  UK
  UR
  UZ
  VE
  VI
  VO
  WA
  CY
  FY
  WO
  XH
  YI
  YO
  ZA
  ZU
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  title     String
  slug      String
  excerpt   String     @default("")
  content   String
  status    PostStatus
  banner    String?
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  metadata  Meta[]
  lang      Lang       @default(EN)

  variants PostVariant[]
}

model PostVariant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  title     String
  excerpt   String
  content   String
  lang      Lang     @default(FR)

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

enum MetaType {
  string
  number
  boolean
}

model Meta {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  key       String
  type      MetaType @default(string)
  value     String?
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
}

enum KeyStatus {
  ACTIVE
  INACTIVE
}

model APIKey {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  disabledAt DateTime?
  name       String
  note       String?
  key        String    @unique
  status     KeyStatus
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
}
