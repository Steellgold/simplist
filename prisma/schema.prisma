generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  firstName String?
  lastName  String?
  email     String    @unique
  posts     Post[]
  keys      APIKey[]
  projects  Project[]
}

model Project {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  commentsEnabled Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  name     String
  posts    Post[]
  keys     APIKey[]
  comments Comment[]
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

enum Lang {
  EN // English
  ZH // Mandarin Chinese
  HI // Hindi
  ES // Spanish
  FR // French
  AR // Modern Standard Arabic
  BN // Bengali
  RU // Russian
  PT // Portuguese
  ID // Indonesian
  UR // Urdu
  DE // German
  JA // Japanese
  SW // Swahili
  MR // Marathi
  TE // Telugu
  TR // Turkish
  TA // Tamil
  FA // Persian
  IT // Italian
  TH // Thai
  GU // Gujarati
  KN // Kannada
  KO // Korean
  PL // Polish
  PA // Punjabi
  VI // Vietnamese
  NL // Dutch
  SV // Swedish
  RO // Romanian
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  title     String
  slug      String
  excerpt   String     @default("")
  content   String
  status    PostStatus
  banner    String?
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  metadata  Meta[]
  lang      Lang       @default(EN)

  variants Variant[]
  comments Comment[]
}

model Variant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title   String
  excerpt String
  content String
  lang    Lang   @default(FR)

  parent   Post   @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId String
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  name    String
  content String
  metas   Meta[]
}

enum MetaType {
  string
  number
  boolean
  date
  time
  datetime
}

model Meta {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  key       String
  type      MetaType @default(string)
  value     String?
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
}

enum KeyStatus {
  ACTIVE
  INACTIVE
}

model APIKey {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  disabledAt DateTime?
  name       String
  note       String?
  key        String    @unique
  status     KeyStatus
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
}
